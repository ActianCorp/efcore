// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace MyPrecompiledApp.Generated
{
    public partial class MyContextModel
    {
        private MyContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("ddeacb25-f4d9-4dc0-9eae-725fc7969804"), entityTypeCount: 1)
        {
        }

        partial void Initialize()
        {
            var myEntity = MyEntityEntityType.Create(this);

            MyEntityEntityType.CreateAnnotations(myEntity);

            AddAnnotation("ProductVersion", "9.0.0-dev");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModelFactory", () => CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var myEntity = FindEntityType("MyPrecompiledApp.MyEntity")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            myEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var myPrecompiledAppMyEntityTableBase = new TableBase("MyPrecompiledApp.MyEntity", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", myPrecompiledAppMyEntityTableBase);
            myPrecompiledAppMyEntityTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", myPrecompiledAppMyEntityTableBase);
            myPrecompiledAppMyEntityTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("MyPrecompiledApp.MyEntity", myPrecompiledAppMyEntityTableBase);
            var myPrecompiledAppMyEntityMappingBase = new TableMappingBase<ColumnMappingBase>(myEntity, myPrecompiledAppMyEntityTableBase, null);
            myPrecompiledAppMyEntityTableBase.AddTypeMapping(myPrecompiledAppMyEntityMappingBase, false);
            defaultTableMappings.Add(myPrecompiledAppMyEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, myEntity.FindProperty("Id")!, myPrecompiledAppMyEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, myEntity.FindProperty("Name")!, myPrecompiledAppMyEntityMappingBase);

            var tableMappings = new List<TableMapping>();
            myEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var entitiesTable = new Table("Entities", null, relationalModel);
            var idColumn = new Column("Id", "int", entitiesTable);
            entitiesTable.Columns.Add("Id", idColumn);
            var nameColumn = new Column("Name", "nvarchar(max)", entitiesTable);
            entitiesTable.Columns.Add("Name", nameColumn);
            var pK_Entities = new UniqueConstraint("PK_Entities", entitiesTable, new[] { idColumn });
            entitiesTable.PrimaryKey = pK_Entities;
            var pK_EntitiesKey = RelationalModel.GetKey(this,
                "MyPrecompiledApp.MyEntity",
                new[] { "Id" });
            pK_Entities.MappedKeys.Add(pK_EntitiesKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_EntitiesKey).Add(pK_Entities);
            entitiesTable.UniqueConstraints.Add("PK_Entities", pK_Entities);
            relationalModel.Tables.Add(("Entities", null), entitiesTable);
            var entitiesTableMapping = new TableMapping(myEntity, entitiesTable, null);
            entitiesTable.AddTypeMapping(entitiesTableMapping, false);
            tableMappings.Add(entitiesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, myEntity.FindProperty("Id")!, entitiesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, myEntity.FindProperty("Name")!, entitiesTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
