// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;

#pragma warning disable 219, 612, 618
#nullable disable

namespace MyPrecompiledApp.Generated
{
    [EntityFrameworkInternal]
    public partial class MyEntityEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "MyPrecompiledApp.MyEntity",
                typeof(MyEntity),
                baseEntityType,
                propertyCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(MyEntity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyEntity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetGetter(
                (MyEntity entity) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Id(entity),
                (MyEntity entity) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Id(entity) == 0,
                (MyEntity instance) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Id(instance),
                (MyEntity instance) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Id(instance) == 0);
            id.SetSetter(
                (MyEntity entity, int value) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Id(entity) = value);
            id.SetMaterializationSetter(
                (MyEntity entity, int value) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Id(entity) = value);
            id.SetAccessors(
                (InternalEntityEntry entry) => entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<int>(0) : entry.FlaggedAsTemporary(0) && UnsafeAccessor_MyPrecompiledApp_MyEntity_Id((MyEntity)entry.Entity) == 0 ? entry.ReadTemporaryValue<int>(0) : UnsafeAccessor_MyPrecompiledApp_MyEntity_Id((MyEntity)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Id((MyEntity)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 0),
                (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 0),
                (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            id.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("MyEntityEntityType.UnsafeAccessor_MyPrecompiledApp_MyEntity_Id", "MyPrecompiledApp.Generated") });

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(MyEntity).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyEntity).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            name.SetGetter(
                (MyEntity entity) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Name(entity),
                (MyEntity entity) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Name(entity) == null,
                (MyEntity instance) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Name(instance),
                (MyEntity instance) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Name(instance) == null);
            name.SetSetter(
                (MyEntity entity, string value) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Name(entity) = value);
            name.SetMaterializationSetter(
                (MyEntity entity, string value) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Name(entity) = value);
            name.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Name((MyEntity)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_MyPrecompiledApp_MyEntity_Name((MyEntity)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(name, 1),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(name),
                (ValueBuffer valueBuffer) => valueBuffer[1]);
            name.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            name.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                storeTypePostfix: StoreTypePostfix.None);
            name.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            name.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("MyEntityEntityType.UnsafeAccessor_MyPrecompiledApp_MyEntity_Name", "MyPrecompiledApp.Generated") });

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id")!;
            var name = runtimeEntityType.FindProperty("Name")!;
            runtimeEntityType.SetOriginalValuesFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (MyEntity)source.Entity;
                    return (ISnapshot)new Snapshot<int, string>(((ValueComparer<int>)((IProperty)id).GetValueComparer()).Snapshot(source.GetCurrentValue<int>(id)), source.GetCurrentValue<string>(name) == null ? null : ((ValueComparer<string>)((IProperty)name).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(name)));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                () => (ISnapshot)new Snapshot<int>(((ValueComparer<int>)((IProperty)id).GetValueComparer()).Snapshot(default(int))));
            runtimeEntityType.SetTemporaryValuesFactory(
                (InternalEntityEntry source) => (ISnapshot)new Snapshot<int>(default(int)));
            runtimeEntityType.SetShadowValuesFactory(
                (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (MyEntity)source.Entity;
                    return (ISnapshot)new Snapshot<int>(((ValueComparer<int>)((IProperty)id).GetKeyValueComparer()).Snapshot(source.GetCurrentValue<int>(id)));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 2,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 2,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 1);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Entities");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Id>k__BackingField")]
        public static extern ref int UnsafeAccessor_MyPrecompiledApp_MyEntity_Id(MyEntity @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Name>k__BackingField")]
        public static extern ref string UnsafeAccessor_MyPrecompiledApp_MyEntity_Name(MyEntity @this);
    }
}
